use dlopen::raw::Library;
use once_cell::sync::Lazy;
use rutie::{Class, Encoding, Object, RString, VM};
use std::io::Write;
use tempfile::NamedTempFile;

static FILES: Lazy<Vec<&[u8]>> = Lazy::new(|| {
    vec![
        <% include_bytes_paths.each do |path| %><%= path %>,
        <% end %>
    ]
});

fn main() {
    unsafe {
        VM::init();
        VM::init_loadpath();
        let loaded_lib_names = vec![<%= lib_names %>];
        let _libs = FILES
            .iter()
            .enumerate()
            .map(|(i, file)| {
                let mut temp_file = NamedTempFile::new().unwrap();
                temp_file.write_all(file).unwrap();
                let lib = Library::open(temp_file.path()).unwrap();
                let init_func_name = format!("{}{}", "Init_", loaded_lib_names[i]);
                let func: unsafe extern "C" fn() = lib.symbol(&init_func_name).unwrap();
                func();
                temp_file.close().unwrap();
                return lib;
            })
            .collect::<Vec<Library>>();

        let iseq_class = Class::from_existing("RubyVM").get_nested_class("InstructionSequence");
        let file = include_bytes!("../<%= rbin_path %>");
        let src = RString::from_bytes(file, &Encoding::us_ascii());
        let iseq = iseq_class.send("load_from_binary", &[src.to_any_object()]);
        iseq.send("eval", &[]);
    };
}
